//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProj;                     // Offset:  128, size:   64
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 Tech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProj;                    // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 30 "D:\Projects\c++\asdf\RPG\RPG\Shader\InstancedTest.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.Pos.w
                
                #line 31
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- vout.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- vout.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- vout.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- vout.Pos.w
                
                #line 32
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- vout.Pos.w
                
                #line 35
                mov r0.xyzw, v1.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 38
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                ret 
                // Approximately 18 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.Pos.x; v0.y <- pin.Pos.y; v0.z <- pin.Pos.z; v0.w <- pin.Pos.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 60 "D:\Projects\c++\asdf\RPG\RPG\Shader\InstancedTest.fx"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 TechInstanced
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProj;                    // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // WORLD                    0   xyzw        2     NONE   float   xyzw
                // WORLD                    1   xyzw        3     NONE   float   xyzw
                // WORLD                    2   xyzw        4     NONE   float   xyzw
                // WORLD                    3   xyzw        5     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   v2.x <- inst.World._m00; v2.y <- inst.World._m01; v2.z <- inst.World._m02; v2.w <- inst.World._m03; 
                //   v3.x <- inst.World._m10; v3.y <- inst.World._m11; v3.z <- inst.World._m12; v3.w <- inst.World._m13; 
                //   v4.x <- inst.World._m20; v4.y <- inst.World._m21; v4.z <- inst.World._m22; v4.w <- inst.World._m23; 
                //   v5.x <- inst.World._m30; v5.y <- inst.World._m31; v5.z <- inst.World._m32; v5.w <- inst.World._m33; 
                //   o1.x <- <VS_Instanced return value>.Color.x; o1.y <- <VS_Instanced return value>.Color.y; o1.z <- <VS_Instanced return value>.Color.z; o1.w <- <VS_Instanced return value>.Color.w; 
                //   o0.x <- <VS_Instanced return value>.Pos.x; o0.y <- <VS_Instanced return value>.Pos.y; o0.z <- <VS_Instanced return value>.Pos.z; o0.w <- <VS_Instanced return value>.Pos.w
                //
                #line 46 "D:\Projects\c++\asdf\RPG\RPG\Shader\InstancedTest.fx"
                mul r0.xyzw, v0.xxxx, v2.xyzw
                mul r1.xyzw, v0.yyyy, v3.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, v0.zzzz, v4.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, v5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.Pos.x; r0.y <- vout.Pos.y; r0.z <- vout.Pos.z; r0.w <- vout.Pos.w
                
                #line 47
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- vout.Pos.w
                
                #line 48
                dp4 r0.x, r1.xyzw, cb0[8].xyzw  // r0.x <- vout.Pos.x
                dp4 r0.y, r1.xyzw, cb0[9].xyzw  // r0.y <- vout.Pos.y
                dp4 r0.z, r1.xyzw, cb0[10].xyzw  // r0.z <- vout.Pos.z
                dp4 r0.w, r1.xyzw, cb0[11].xyzw  // r0.w <- vout.Pos.w
                
                #line 51
                mov r1.xyzw, v1.xyzw  // r1.x <- vout.Color.x; r1.y <- vout.Color.y; r1.z <- vout.Color.z; r1.w <- vout.Color.w
                
                #line 54
                mov o0.xyzw, r0.xyzw
                mov o1.xyzw, r1.xyzw
                ret 
                // Approximately 19 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.Pos.x; v0.y <- pin.Pos.y; v0.z <- pin.Pos.z; v0.w <- pin.Pos.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 60 "D:\Projects\c++\asdf\RPG\RPG\Shader\InstancedTest.fx"
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

