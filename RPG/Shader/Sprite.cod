//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProj;                     // Offset:  128, size:   64
    float4x4 gUvWorld;                  // Offset:  192, size:   64
    float4  gTextureDiffuse;            // Offset:  256, size:   16
    uint    gTextureID;                 // Offset:  272, size:    4
}

//
// 2 local object(s)
//
Texture2DArray gTexture;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 3 technique(s)
    //
    technique11 TechTextureInstanced
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProj;                    // Offset:  128 Size:    64
                //   float4x4 gUvWorld;                 // Offset:  192 Size:    64 [unused]
                //   float4 gTextureDiffuse;            // Offset:  256 Size:    16 [unused]
                //   uint gTextureID;                   // Offset:  272 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyzw
                // WORLD                    1   xyzw        4     NONE   float   xyzw
                // WORLD                    2   xyzw        5     NONE   float   xyzw
                // WORLD                    3   xyzw        6     NONE   float   xyzw
                // UVWORLD                  0   xyzw        7     NONE   float   xy  
                // UVWORLD                  1   xyzw        8     NONE   float   xy  
                // UVWORLD                  2   xyzw        9     NONE   float   xy  
                // UVWORLD                  3   xyzw       10     NONE   float   xy  
                // DIFFUSE                  0   xyzw       11     NONE   float   xyzw
                // TEXTUREID                0   x          12     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_input v5.xyzw
                dcl_input v6.xyzw
                dcl_input v7.xy
                dcl_input v8.xy
                dcl_input v9.xy
                dcl_input v10.xy
                dcl_input v11.xyzw
                dcl_input v12.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.x
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- inst.World._m00; v3.y <- inst.World._m01; v3.z <- inst.World._m02; v3.w <- inst.World._m03; 
                //   v4.x <- inst.World._m10; v4.y <- inst.World._m11; v4.z <- inst.World._m12; v4.w <- inst.World._m13; 
                //   v5.x <- inst.World._m20; v5.y <- inst.World._m21; v5.z <- inst.World._m22; v5.w <- inst.World._m23; 
                //   v6.x <- inst.World._m30; v6.y <- inst.World._m31; v6.z <- inst.World._m32; v6.w <- inst.World._m33; 
                //   v7.x <- inst.UvWorld._m00; v7.y <- inst.UvWorld._m01; v7.z <- inst.UvWorld._m02; v7.w <- inst.UvWorld._m03; 
                //   v8.x <- inst.UvWorld._m10; v8.y <- inst.UvWorld._m11; v8.z <- inst.UvWorld._m12; v8.w <- inst.UvWorld._m13; 
                //   v9.x <- inst.UvWorld._m20; v9.y <- inst.UvWorld._m21; v9.z <- inst.UvWorld._m22; v9.w <- inst.UvWorld._m23; 
                //   v10.x <- inst.UvWorld._m30; v10.y <- inst.UvWorld._m31; v10.z <- inst.UvWorld._m32; v10.w <- inst.UvWorld._m33; 
                //   v11.x <- inst.Diffuse.x; v11.y <- inst.Diffuse.y; v11.z <- inst.Diffuse.z; v11.w <- inst.Diffuse.w; 
                //   v12.x <- inst.TextureID; 
                //   o4.x <- <VS_Instanced return value>.TextureID; 
                //   o3.x <- <VS_Instanced return value>.Diffuse.x; o3.y <- <VS_Instanced return value>.Diffuse.y; o3.z <- <VS_Instanced return value>.Diffuse.z; o3.w <- <VS_Instanced return value>.Diffuse.w; 
                //   o2.x <- <VS_Instanced return value>.Tex.x; o2.y <- <VS_Instanced return value>.Tex.y; 
                //   o1.x <- <VS_Instanced return value>.Color.x; o1.y <- <VS_Instanced return value>.Color.y; o1.z <- <VS_Instanced return value>.Color.z; o1.w <- <VS_Instanced return value>.Color.w; 
                //   o0.x <- <VS_Instanced return value>.Pos.x; o0.y <- <VS_Instanced return value>.Pos.y; o0.z <- <VS_Instanced return value>.Pos.z; o0.w <- <VS_Instanced return value>.Pos.w
                //
                #line 51 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                mul r0.xyzw, v0.xxxx, v3.xyzw
                mul r1.xyzw, v0.yyyy, v4.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, v0.zzzz, v5.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, v6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.Pos.x; r0.y <- vout.Pos.y; r0.z <- vout.Pos.z; r0.w <- vout.Pos.w
                
                #line 52
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- vout.Pos.w
                
                #line 53
                dp4 r0.x, r1.xyzw, cb0[8].xyzw  // r0.x <- vout.Pos.x
                dp4 r0.y, r1.xyzw, cb0[9].xyzw  // r0.y <- vout.Pos.y
                dp4 r0.z, r1.xyzw, cb0[10].xyzw  // r0.z <- vout.Pos.z
                dp4 r0.w, r1.xyzw, cb0[11].xyzw  // r0.w <- vout.Pos.w
                
                #line 55
                mov r1.xyzw, v1.xyzw  // r1.x <- vout.Color.x; r1.y <- vout.Color.y; r1.z <- vout.Color.z; r1.w <- vout.Color.w
                
                #line 57
                mov r2.xyzw, v11.xyzw  // r2.x <- vout.Diffuse.x; r2.y <- vout.Diffuse.y; r2.z <- vout.Diffuse.z; r2.w <- vout.Diffuse.w
                
                #line 58
                mov r3.x, v12.x  // r3.x <- vout.TextureID
                
                #line 60
                mul r3.yz, v2.xxxx, v7.xxyx
                mul r4.xy, v2.yyyy, v8.xyxx
                add r3.yz, r3.yyzy, r4.xxyx
                mul r4.xy, v9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r3.yz, r3.yyzy, r4.xxyx
                mul r4.xy, v10.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                add r3.yz, r3.yyzy, r4.xxyx  // r3.y <- vout.Tex.x; r3.z <- vout.Tex.y
                
                #line 62
                mov o0.xyzw, r0.xyzw
                mov o1.xyzw, r1.xyzw
                mov o3.xyzw, r2.xyzw
                mov o2.xy, r3.yzyy
                mov o4.x, r3.x
                ret 
                // Approximately 31 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gTexture                          texture  float4     2darray             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v3.xyzw
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.Pos.x; v0.y <- pin.Pos.y; v0.z <- pin.Pos.z; v0.w <- pin.Pos.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   v2.x <- pin.Tex.x; v2.y <- pin.Tex.y; 
                //   v3.x <- pin.Diffuse.x; v3.y <- pin.Diffuse.y; v3.z <- pin.Diffuse.z; v3.w <- pin.Diffuse.w; 
                //   v4.x <- pin.TextureID; 
                //   o0.x <- <PS_Texture return value>.x; o0.y <- <PS_Texture return value>.y; o0.z <- <PS_Texture return value>.z; o0.w <- <PS_Texture return value>.w
                //
                #line 86 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                utof r0.z, v4.x
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v3.xyzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 TechTexture
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProj;                    // Offset:  128 Size:    64
                //   float4x4 gUvWorld;                 // Offset:  192 Size:    64
                //   float4 gTextureDiffuse;            // Offset:  256 Size:    16
                //   uint gTextureID;                   // Offset:  272 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.x
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o4.x <- <VS return value>.TextureID; 
                //   o3.x <- <VS return value>.Diffuse.x; o3.y <- <VS return value>.Diffuse.y; o3.z <- <VS return value>.Diffuse.z; o3.w <- <VS return value>.Diffuse.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 71 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.Pos.w
                
                #line 72
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- vout.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- vout.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- vout.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- vout.Pos.w
                
                #line 73
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- vout.Pos.w
                
                #line 75
                mov r0.xyzw, v1.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 76
                mov r2.xyzw, cb0[16].xyzw  // r2.x <- vout.Diffuse.x; r2.y <- vout.Diffuse.y; r2.z <- vout.Diffuse.z; r2.w <- vout.Diffuse.w
                
                #line 77
                mov r3.x, cb0[17].x  // r3.x <- vout.TextureID
                
                #line 79
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 81
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                mov o3.xyzw, r2.xyzw
                mov o2.xy, r5.xyxx
                mov o4.x, r3.x
                ret 
                // Approximately 27 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gTexture                          texture  float4     2darray             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v3.xyzw
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.Pos.x; v0.y <- pin.Pos.y; v0.z <- pin.Pos.z; v0.w <- pin.Pos.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   v2.x <- pin.Tex.x; v2.y <- pin.Tex.y; 
                //   v3.x <- pin.Diffuse.x; v3.y <- pin.Diffuse.y; v3.z <- pin.Diffuse.z; v3.w <- pin.Diffuse.w; 
                //   v4.x <- pin.TextureID; 
                //   o0.x <- <PS_Texture return value>.x; o0.y <- <PS_Texture return value>.y; o0.z <- <PS_Texture return value>.z; o0.w <- <PS_Texture return value>.w
                //
                #line 86 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                utof r0.z, v4.x
                mov r0.xy, v2.xyxx
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v3.xyzw
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 TechColor
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProj;                    // Offset:  128 Size:    64
                //   float4x4 gUvWorld;                 // Offset:  192 Size:    64
                //   float4 gTextureDiffuse;            // Offset:  256 Size:    16
                //   uint gTextureID;                   // Offset:  272 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.x
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Color.x; v1.y <- vin.Color.y; v1.z <- vin.Color.z; v1.w <- vin.Color.w; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o4.x <- <VS return value>.TextureID; 
                //   o3.x <- <VS return value>.Diffuse.x; o3.y <- <VS return value>.Diffuse.y; o3.z <- <VS return value>.Diffuse.z; o3.w <- <VS return value>.Diffuse.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Color.x; o1.y <- <VS return value>.Color.y; o1.z <- <VS return value>.Color.z; o1.w <- <VS return value>.Color.w; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 71 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.Pos.w
                
                #line 72
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- vout.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- vout.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- vout.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- vout.Pos.w
                
                #line 73
                dp4 r1.x, r0.xyzw, cb0[8].xyzw  // r1.x <- vout.Pos.x
                dp4 r1.y, r0.xyzw, cb0[9].xyzw  // r1.y <- vout.Pos.y
                dp4 r1.z, r0.xyzw, cb0[10].xyzw  // r1.z <- vout.Pos.z
                dp4 r1.w, r0.xyzw, cb0[11].xyzw  // r1.w <- vout.Pos.w
                
                #line 75
                mov r0.xyzw, v1.xyzw  // r0.x <- vout.Color.x; r0.y <- vout.Color.y; r0.z <- vout.Color.z; r0.w <- vout.Color.w
                
                #line 76
                mov r2.xyzw, cb0[16].xyzw  // r2.x <- vout.Diffuse.x; r2.y <- vout.Diffuse.y; r2.z <- vout.Diffuse.z; r2.w <- vout.Diffuse.w
                
                #line 77
                mov r3.x, cb0[17].x  // r3.x <- vout.TextureID
                
                #line 79
                mov r4.xy, v2.xyxx
                mov r4.zw, l(0,0,0,1.000000)
                dp4 r5.x, r4.xyzw, cb0[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r4.xyzw, cb0[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 81
                mov o0.xyzw, r1.xyzw
                mov o1.xyzw, r0.xyzw
                mov o3.xyzw, r2.xyzw
                mov o2.xy, r5.xyxx
                mov o4.x, r3.x
                ret 
                // Approximately 27 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // COLOR                    0   xyzw        1     NONE   float   xyzw
                // TEXCOORD                 0   xy          2     NONE   float       
                // DIFFUSE                  0   xyzw        3     NONE   float   xyzw
                // TEXTUREID                0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                //
                // Initial variable locations:
                //   v0.x <- pin.Pos.x; v0.y <- pin.Pos.y; v0.z <- pin.Pos.z; v0.w <- pin.Pos.w; 
                //   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
                //   v2.x <- pin.Tex.x; v2.y <- pin.Tex.y; 
                //   v3.x <- pin.Diffuse.x; v3.y <- pin.Diffuse.y; v3.z <- pin.Diffuse.z; v3.w <- pin.Diffuse.w; 
                //   v4.x <- pin.TextureID; 
                //   o0.x <- <PS_Color return value>.x; o0.y <- <PS_Color return value>.y; o0.z <- <PS_Color return value>.z; o0.w <- <PS_Color return value>.w
                //
                #line 92 "D:\Projects\c++\asdf\RPG\RPG\Shader\Sprite.fx"
                mul o0.xyzw, v1.xyzw, v3.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

}

