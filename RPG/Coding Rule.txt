1. no function in assert
ex) assert(ptr != nullptr) ==> OK
ex) assert(CreateFile(...)) ==> NOOOOO

2. use smart pointer only if the lifetime of pointer is clear and simple
ex)
Init()
{
    PTR* ptr;
    anotherLibrary->BuildPtr(&ptr);

    /* utilizes ptr */

    ReleaseCOM(ptr);
}
and if you use the variable only in a certain scope, then make 'ptr' a smart pointer (ComPtr or unique_ptr)
like this...
Init()
{
    ComPtr<PTR> ptr;
    anotherLibrary->BuildPtr(ptr.GetAddressOf());

    /* utilizes ptr */
}

in case that other object refers or takes the pointer, never use smart pointer
it makes hard to detect memory leak.
ex)
Init()
{
    PTR* ptr = new PTR;
    container.insert(ptr); // sending ptr to other object
}

container::~container()
{
    delete all ptrs
}